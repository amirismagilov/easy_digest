import os
import sys
import django
import logging

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    CallbackQueryHandler,
    ConversationHandler,
    MessageHandler,
    filters
)
from asgiref.sync import sync_to_async

# --- Django setup ---
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')
django.setup()

# --- –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π ---
from admin_panel.models import User, DigestGroup, Channel

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO)

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler ---
ASK_GROUP_NAME = 1
SELECT_GROUP_FOR_CHANNEL = 2
ENTER_CHANNEL_USERNAME = 3

# --- –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
@sync_to_async
def get_or_create_user(tg_id, username):
    user, created = User.objects.get_or_create(
        telegram_id=tg_id,
        defaults={'username': username}
    )
    if not created and username and user.username != username:
        user.username = username
        user.save()
    return user

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä—É–ø–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
@sync_to_async
def get_user_groups(tg_id):
    user = User.objects.filter(telegram_id=tg_id).first()
    if not user:
        return []
    return list(user.digestgroup_set.values_list("name", flat=True))

# --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã ---
@sync_to_async
def create_group(tg_id, name):
    user = User.objects.get(telegram_id=tg_id)
    DigestGroup.objects.create(user=user, name=name)

# --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∏ –ø—Ä–∏–≤—è–∑–∫–∞ –∫ –≥—Ä—É–ø–ø–µ ---
@sync_to_async
def save_channel_to_group(tg_id, group_name, username):
    user = User.objects.get(telegram_id=tg_id)
    group = DigestGroup.objects.get(user=user, name=group_name)
    channel, _ = Channel.objects.get_or_create(username=username, defaults={"title": username})
    group.channels.add(channel)

# --- /start –∫–æ–º–∞–Ω–¥–∞ —Å –º–µ–Ω—é ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_id = update.effective_user.id
    username = update.effective_user.username
    await get_or_create_user(tg_id, username)

    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data="add_group")],
        [InlineKeyboardButton("üìã –ú–æ–∏ –≥—Ä—É–ø–ø—ã", callback_data="show_groups")],
        [InlineKeyboardButton("üì° –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="add_channel")],
        [InlineKeyboardButton("üì§ –ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç", callback_data="get_digest")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ—Ç–æ–≤ —Å–æ–±—Ä–∞—Ç—å —Ç–µ–±–µ –¥–∞–π–¥–∂–µ—Å—Ç –ø–æ –∫–∞–Ω–∞–ª–∞–º. –ù–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ.",
        reply_markup=reply_markup
    )

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ---
async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    tg_id = query.from_user.id

    if query.data == "add_group":
        await query.message.reply_text("–ö–∞–∫ –Ω–∞–∑–≤–∞—Ç—å –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É –∫–∞–Ω–∞–ª–æ–≤?")
        return ASK_GROUP_NAME

    elif query.data == "show_groups":
        groups = await get_user_groups(tg_id)
        if not groups:
            await query.message.reply_text("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã.")
        else:
            # –ö–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–Ω–∞–ª—ã"
            buttons = [
                [InlineKeyboardButton(f"üìÇ {g}", callback_data=f"list_channels::{g}")]
                for g in groups
            ]
            reply_markup = InlineKeyboardMarkup(buttons)
            await query.message.reply_text("–¢–≤–æ–∏ –≥—Ä—É–ø–ø—ã:", reply_markup=reply_markup)
        return ConversationHandler.END

    elif query.data == "add_channel":
        groups = await get_user_groups(tg_id)
        if not groups:
            await query.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç –≥—Ä—É–ø–ø. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É.")
            return ConversationHandler.END

        context.user_data["group_list"] = groups
        buttons = [[InlineKeyboardButton(g, callback_data=f"group_{i}")] for i, g in enumerate(groups)]
        reply_markup = InlineKeyboardMarkup(buttons)

        await query.message.reply_text("–í—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—É, –≤ –∫–æ—Ç–æ—Ä—É—é –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª:", reply_markup=reply_markup)
        return SELECT_GROUP_FOR_CHANNEL

    elif query.data == "get_digest":
        await query.message.reply_text("‚öôÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üòä")

    elif query.data.startswith("list_channels::"):
        group_name = query.data.split("::")[1]
        channels = await get_group_channels(tg_id, group_name)

        if not channels:
            await query.message.reply_text(f"–í –≥—Ä—É–ø–ø–µ ¬´{group_name}¬ª –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞–Ω–∞–ª–æ–≤.")
            return ConversationHandler.END

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫–∏
        message_lines = [f"–ö–∞–Ω–∞–ª—ã –≤ ¬´{group_name}¬ª:"]

        buttons = []

        for username in channels:
            message_lines.append(f"@{username}")
            buttons.append([
                InlineKeyboardButton(
                    text=f"üóë –£–¥–∞–ª–∏—Ç—å @{username}",
                    callback_data=f"remove_channel::{group_name}::{username}"
                )
            ])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë"
        buttons.append([
            InlineKeyboardButton(
                text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª",
                callback_data="add_channel"
            )
        ])

        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.reply_text("\n".join(message_lines), reply_markup=reply_markup)
        return ConversationHandler.END
    
    elif query.data.startswith("remove_channel::"):
        _, group_name, username = query.data.split("::")

        success = await remove_channel_from_group(tg_id, group_name, username)
        if success:
            await query.message.reply_text(f"üóë –ö–∞–Ω–∞–ª @{username} —É–¥–∞–ª—ë–Ω –∏–∑ –≥—Ä—É–ø–ø—ã ¬´{group_name}¬ª")
        else:
            await query.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª.")
        return ConversationHandler.END

    return ConversationHandler.END

# --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã ---
async def handle_group_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_id = update.effective_user.id
    group_name = update.message.text.strip()

    await create_group(tg_id, group_name)
    await update.message.reply_text(f"‚úÖ –ì—Ä—É–ø–ø–∞ ¬´{group_name}¬ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
    return ConversationHandler.END

# --- –í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ ---
async def select_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    selected = query.data
    if selected.startswith("group_"):
        index = int(selected.replace("group_", ""))
        group_name = context.user_data["group_list"][index]
        context.user_data["selected_group"] = group_name

        await query.message.reply_text("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å username –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: @bbbreaking)")
        return ENTER_CHANNEL_USERNAME

# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ username –∫–∞–Ω–∞–ª–∞ –≤ –≥—Ä—É–ø–ø—É ---
async def enter_channel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_id = update.effective_user.id
    group = context.user_data["selected_group"]
    username = update.message.text.strip().lstrip("@")

    await save_channel_to_group(tg_id, group, username)
    await update.message.reply_text(
        f"‚úÖ –ö–∞–Ω–∞–ª @{username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É ¬´{group}¬ª.\n\n"
        "–ß—Ç–æ –¥–∞–ª—å—à–µ?",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üì° –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –∫–∞–Ω–∞–ª", callback_data="add_channel")],
            [InlineKeyboardButton("üì§ –ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç", callback_data="get_digest")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
        ])
    )
    return ConversationHandler.END

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ –≥—Ä—É–ø–ø—ã---
@sync_to_async
def get_group_channels(tg_id, group_name):
    user = User.objects.filter(telegram_id=tg_id).first()
    if not user:
        return []
    group = DigestGroup.objects.filter(user=user, name=group_name).first()
    if not group:
        return []
    return list(group.channels.values_list("username", flat=True))

# --- –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞---
@sync_to_async
def remove_channel_from_group(tg_id, group_name, username):
    user = User.objects.filter(telegram_id=tg_id).first()
    if not user:
        return False
    group = DigestGroup.objects.filter(user=user, name=group_name).first()
    if not group:
        return False
    channel = Channel.objects.filter(username=username).first()
    if channel:
        group.channels.remove(channel)
        return True
    return False

# --- –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ ---
def run_bot():
    app = ApplicationBuilder().token("7800377470:AAEcDECVkGVzOdXrqJRO3lZxo9XMQkdE8Uc").build()

    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(handle_button)],
        states={
            ASK_GROUP_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_group_name)],
            SELECT_GROUP_FOR_CHANNEL: [CallbackQueryHandler(select_group)],
            ENTER_CHANNEL_USERNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_channel)],
        },
        fallbacks=[],
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)
    app.run_polling()

if __name__ == "__main__":
    run_bot()